image: maven:slim

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  GIT_SUBMODULE_STRATEGY: recursive


# Cache downloaded dependencies and plugins between builds.
cache:
  paths:
    - /root/.m2/repository/

# Validate merge requests using JDK8
validate:
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS test-compile'

# Verify merge requests using JDK8
verify:
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS verify'
  except:
    - master

# For `master` branch run `mvn deploy` automatically.
# Here you need to decide whether you want to use JDK7 or 8.
# To get this working you need to define a volume while configuring your gitlab-ci-multi-runner.
# Mount your `settings.xml` as `/root/.m2/settings.xml` which holds your secrets.
# See https://maven.apache.org/settings.html
deploy-release:jdk8:
  stage: deploy
  artifacts:
        paths:
        - target/*.jar
  script:
    # compile muss zwigend dabei sein, clean ist wohl nicht notwendig
    - 'mvn $MAVEN_CLI_OPTS clean compile assembly:single'
  only:
    - master
    - tags
    - triggers
    # Nur zu Testzwecken, wird dann sp√§ter wieder entfernt
    - feature/xsdRefactoring
